CREATE TABLE USERS(
	USER_ID 		VARCHAR2(100),
	FIRST_NAME 		VARCHAR2(100) NOT NULL,
	LAST_NAME 		VARCHAR2(100) NOT NULL,
	YEAR_OF_BIRTH 	NUMBER(38),
	MONTH_OF_BIRTH	NUMBER(38),
	DAY_OF_BIRTH 	NUMBER(38),
	GENDER 			VARCHAR2(100),
	PRIMARY KEY 	(USER_ID)
);

CREATE TABLE HOME_LOCATION(
	LOC_ID			VARCHAR2(100),
	USER_ID 		VARCHAR2(100),
	CITY 			VARCHAR2(100),
	STATE			VARCHAR2(100),
	COUNTRY			VARCHAR2(100),
	FOREIGN KEY (USER_ID) 
        REFERENCES USERS(USER_ID),
	PRIMARY KEY 	(LOC_ID)
);

/*
	Current City is a one-to-many relation
	Foreign key USER_ID represents which user is currently in which cities
*/
CREATE TABLE CUR_LOCATION (
	LOC_ID			VARCHAR2(100),
	USER_ID 		VARCHAR2(100),
	CITY			VARCHAR2(100),
	STATE			VARCHAR2(100),
	COUNTRY			VARCHAR2(100),
	FOREIGN KEY (USER_ID) 
        REFERENCES USERS(USER_ID),
	PRIMARY KEY 		(LOC_ID)
);

/*
	Education Program is a one-to-many relation, 
	Foreign key to USER_ID represents which user went to the which schools
*/
CREATE TABLE EDUPROGRAM (
	EDU_ID						VARCHAR2(100),
	USER_ID 					VARCHAR2(100),
	INSTITUTION_NAME			VARCHAR2(100),
	PROGRAM_YEAR				NUMBER(38),
	PROGRAM_CONCENTRATION 		CHAR(100),
	PROGRAM_DEGREE				VARCHAR2(100),
	FOREIGN KEY (USER_ID) 
        REFERENCES USERS(USER_ID),
	PRIMARY KEY 				(EDU_ID)
);

/*
	Friendship information is many-to-many,
	Two foreign keys, both pointing to USERS, representing who is friends with who
*/
CREATE TABLE FRIENDSHIP(
    USER1_ID 			VARCHAR2(100),
	USER2_ID 			VARCHAR2(100) NOT NULL UNIQUE,
	FOREIGN KEY (USER1_ID) 
        REFERENCES USERS(USER_ID),
	FOREIGN KEY (USER2_ID) 
        REFERENCES USERS(USER_ID),
	CONSTRAINT friend_constraint CHECK (USER1_ID != USER2_ID)
);

CREATE SEQUENCE home_sequence 
START WITH 1 
INCREMENT BY 1;
CREATE TRIGGER home_trigger
BEFORE INSERT ON HOME_LOCATION
FOR EACH ROW
BEGIN
SELECT home_trigger.nextval into :new.LOC_ID from dual; 
END; 
.
RUN;


CREATE SEQUENCE cur_sequence 
START WITH 1 
INCREMENT BY 1;
CREATE TRIGGER cur_trigger
BEFORE INSERT ON CUR_LOCATION
FOR EACH ROW
BEGIN
SELECT cur_trigger.nextval into :new.LOC_ID from dual; 
END; 
.
RUN;

CREATE SEQUENCE edu_sequence 
START WITH 1 
INCREMENT BY 1;
CREATE TRIGGER edu_trigger
BEFORE INSERT ON EDUPROGRAM
FOR EACH ROW
BEGIN
SELECT edu_sequence.nextval into :new.EDU_ID from dual; 
END; 
.
RUN;


CREATE TABLE ALBUM (
	ALBUM_ID			VARCHAR2(100),
	OWNER_ID			VARCHAR2(100) NOT NULL,
	ALBUM_NAME			VARCHAR2(100),
	COVER_PHOTO_ID		VARCHAR2(100) NOT NULL, 
	ALBUM_CREATED_TIME	TIMESTAMP(6), 
	ALBUM_MODIFIED_TIME	TIMESTAMP(6),
	ALBUM_LINK			VARCHAR2(2000),
	ALBUM_VISIBILITY	VARCHAR2(100) CHECK(ALBUM_VISIBILITY='EVERYONE,' OR 
										   ALBUM_VISIBILITY='FRIENDS_OF_FRIENDS,' OR 
										   ALBUM_VISIBILITY='MYSELF,' OR 
										   ALBUM_VISIBILITY='CUSTOM,' ),
	PRIMARY KEY 		(ALBUM_ID)
);

CREATE TABLE PHOTO (
	PHOTO_ID			VARCHAR2(100),
	PHOTO_CAPTION		VARCHAR2(2000),
	PHOTO_CREATED_TIME	TIMESTAMP(6),
	PHOTO_MODIFIED_TIME	TIMESTAMP(6),
	PHOTO_LINK			VARCHAR2(2000),
	PRIMARY KEY 		(PHOTO_ID)
);

/*
	Album-Photo is many-to-many,
	Two foreign keys, representing which photos belong to which albums
*/
CREATE TABLE ALBUM_MEMBERS (
	PHOTO_ID			VARCHAR2(100),
	ALBUM_ID			VARCHAR2(100),
	FOREIGN KEY (PHOTO_ID) 
        REFERENCES PHOTO(PHOTO_ID),
	FOREIGN KEY (ALBUM_ID) 
        REFERENCES ALBUM(ALBUM_ID)
}

/*
	PHOTOAGS are one-to-many
	Foreign key to PHOTO_ID, representing which photo is tagged
*/
CREATE TABLE PHOTOTAGS(
	TAG_ID				VARCHAR2(100),
	PHOTO_ID 			VARCHAR2(100),
	TAG_SUBJECT_ID		VARCHAR2(100) UNIQUE,
	TAG_X_COORDINATE	NUMBER,
	TAG_Y_COORDINATE	NUMBER,
	TAG_CREATED_TIME	TIMESTAMP(6),
	FOREIGN KEY (PHOTO_ID) 
        REFERENCES PHOTO(PHOTO_ID),
	PRIMARY KEY 		(TAG_ID)
);

CREATE SEQUENCE tag_sequence 
START WITH 1 
INCREMENT BY 1;
CREATE TRIGGER tag_trigger
BEFORE INSERT ON PHOTOTAGS
FOR EACH ROW
BEGIN
SELECT tag_sequence.nextval into :new.TAG_ID from dual; 
END; 
.
RUN;

/*
	EVENTS are one-to-many
	Foreign key to USER_ID, representing which user created the event
*/
CREATE TABLE EVENT (
	EVENT_ID			VARCHAR2(100),
	EVENT_NAME			VARCHAR2(100),
	EVENT_TAGLINE		VARCHAR2(1000),
	EVENT_DESCRIPTION	VARCHAR2(4000),
	EVENT_HOST			VARCHAR2(100),
	EVENT_TYPE			VARCHAR2(100),
	EVENT_SUBTYPE		VARCHAR2(100),
	EVENT_LOCATION		VARCHAR2(200),
	EVENT_CITY			VARCHAR2(100),
	EVENT_STATE			VARCHAR2(100),
	EVENT_COUNTRY		VARCHAR2(100),
	EVENT_START_TIME	TIMESTAMP(6),
	EVENT_END_TIME		TIMESTAMP(6),
	EVENT_CREATOR_ID	VARCHAR2(100) UNIQUE,
	FOREIGN KEY (EVENT_CREATOR_ID) 
        REFERENCES USERS(USER_ID),
	PRIMARY KEY 		(EVENT_ID)
);

CREATE TABLE EVENT_PARTICIPANTS(
	EVENT_ID			VARCHAR2(100)
);
